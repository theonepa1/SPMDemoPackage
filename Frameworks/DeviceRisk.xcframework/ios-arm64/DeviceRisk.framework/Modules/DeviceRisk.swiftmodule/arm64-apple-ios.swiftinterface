// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5 (swiftlang-1300.0.31.1 clang-1300.0.29.1)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name DeviceRisk
import AVFoundation
import AdSupport
import AppTrackingTransparency
import SystemConfiguration.CaptiveNetwork
import Combine
import CoreLocation
import CoreMotion
import CoreTelephony
@_exported import DeviceRisk
import ExternalAccessory
import Foundation
import ImageIO
import MessageUI
import Network
import NetworkExtension
import Swift
import SystemConfiguration
import UIKit
import _Concurrency
public protocol DeviceRiskUploadCallback : AnyObject {
  func dataUploadFinished(uploadResult: DeviceRisk.DeviceRiskUploadResult)
  func onError(errorType: DeviceRisk.DeviceRiskErrorType, errorMessage: Swift.String)
}
@objc @_inheritsConvenienceInitializers public class DeviceRiskUploadResult : ObjectiveC.NSObject {
  public var uuid: Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(*, deprecated, message: "Please use the `SocureSigmaDevice` class which provides a simplified API to send fingerprint data.")
public class DeviceRiskManager {
  public typealias CompletionBlock = ((_ success: Swift.Bool, _ result: DeviceRisk.DeviceRiskUploadResult?) -> Swift.Void)
  public static let sharedInstance: DeviceRisk.DeviceRiskManager
  weak public var delegate: DeviceRisk.DeviceRiskUploadCallback?
  public var deviceRiskKey: Swift.String {
    get
  }
  public var userConsentProvided: Swift.Bool
  public var uuid: Swift.String? {
    get
  }
  public enum Context {
    case homepage
    case signup
    case login
    case profile
    case password
    case transaction
    case checkout
    case other(Swift.String)
  }
  convenience public init(key: Swift.String? = nil, existingUUID: Swift.String? = nil)
  @available(*, deprecated, message: "Use init(key:exsitingUUID) instead as `userConsent` is now being set to `true` always.")
  convenience public init(key: Swift.String? = nil, existingUUID: Swift.String? = nil, userConsent: Swift.Bool = true)
  @available(*, deprecated, message: "Use setTracker(key:sources:existingUUID:) instead as `userConsent` is now being set to `true` always.")
  public func setTracker(key: Swift.String, sources: [DeviceRisk.DeviceRiskDataSources] = [.device, .network, .locale, .accelerometer, .motion, .magnetometer, .accessibility], existingUUID: Swift.String? = nil, userConsent: Swift.Bool = true)
  public func setTracker(key: Swift.String, sources: [DeviceRisk.DeviceRiskDataSources] = [.device, .network, .locale, .accelerometer, .motion, .magnetometer, .accessibility], existingUUID: Swift.String? = nil)
  public func passMotionData(accelerometerData: CoreMotion.CMAccelerometerData?, magnetometerData: CoreMotion.CMMagnetometerData?, deviceMotionData: CoreMotion.CMDeviceMotion)
  public func passPedometerData(pedometerData: CoreMotion.CMPedometerData)
  public func passLocationData(locationData: CoreLocation.CLLocation)
  public func passDocumentVerificationData(exifData: [Swift.String : Any])
  public func passContextData(eventsDictionary: [Swift.String : Swift.String])
  public func sendData(forceRefresh: Swift.Bool = false, _ completion: DeviceRisk.DeviceRiskManager.CompletionBlock? = nil, _ isRNused: Swift.Bool = false, context: DeviceRisk.DeviceRiskManager.Context, retryOnFailure: Swift.Bool = true)
  public func sendData(forceRefresh: Swift.Bool = false, _ completion: DeviceRisk.DeviceRiskManager.CompletionBlock? = nil, _ isRNused: Swift.Bool = false, stringContext: Swift.String? = nil, retryOnFailure: Swift.Bool = true)
  @objc deinit
}
public enum DeviceRiskErrorType {
  case InternetConnection
  case DeviceDataUploadError
  case DeviceDataUploadFailed
  case Error
  public static func == (a: DeviceRisk.DeviceRiskErrorType, b: DeviceRisk.DeviceRiskErrorType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum DeviceRiskDataSources {
  case device
  case accelerometer
  case motion
  case magnetometer
  case locale
  case location
  case advertising
  case pedometer
  case network
  case accessibility
  case exif
  case context
  public var key: Swift.String {
    get
  }
  public static var allSources: [DeviceRisk.DeviceRiskDataSources] {
    get
  }
  public static func getDataSource(key: Swift.String) -> DeviceRisk.DeviceRiskDataSources?
  public static func == (a: DeviceRisk.DeviceRiskDataSources, b: DeviceRisk.DeviceRiskDataSources) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct SocureSigmaDeviceConfig {
  public let SDKKey: Swift.String
  public var fingerprintEndpointHost: Swift.String?
  public init(SDKKey: Swift.String, fingerprintEndpointHost: Swift.String? = nil)
}
public enum SocureFingerprintContext {
  case homepage
  case signup
  case login
  case profile
  case password
  case transaction
  case checkout
  case other(Swift.String)
}
public struct SocureFingerprintOptions {
  public var omitLocationData: Swift.Bool
  public var advertisingID: Swift.String?
  public var context: DeviceRisk.SocureFingerprintContext?
  public init(omitLocationData: Swift.Bool = false, advertisingID: Swift.String? = nil, context: DeviceRisk.SocureFingerprintContext? = nil)
}
public struct SocureFingerprintResult {
  public let deviceSessionID: Swift.String
}
public typealias SocureFingerprintCallback = (DeviceRisk.SocureFingerprintResult?, DeviceRisk.SocureSigmaDeviceError?) -> Swift.Void
public enum SocureSigmaDeviceError : Swift.Error {
  case dataFetchError
  case unknownError
  case networkConnectionError(Swift.Error)
  case dataUploadError(Swift.Int?, Swift.String?)
}
@objc @_inheritsConvenienceInitializers public class SocureSigmaDevice : ObjectiveC.NSObject {
  public class func fingerprint(config: DeviceRisk.SocureSigmaDeviceConfig, options: DeviceRisk.SocureFingerprintOptions? = nil, callback: @escaping DeviceRisk.SocureFingerprintCallback)
  @objc override dynamic public init()
  @objc deinit
}
extension DeviceRisk.DeviceRiskErrorType : Swift.Equatable {}
extension DeviceRisk.DeviceRiskErrorType : Swift.Hashable {}
extension DeviceRisk.DeviceRiskDataSources : Swift.Equatable {}
extension DeviceRisk.DeviceRiskDataSources : Swift.Hashable {}
